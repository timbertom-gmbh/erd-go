package main

// Code generated by peg erd.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleroot
	ruleEOT
	ruleexpression
	ruleempty_line
	rulecomment_line
	rulecluster_info
	rulecluster_end
	rulecluster_start
	ruletitle_info
	ruletable_info
	ruletable_title
	ruletable_column
	rulecolumn_name
	rulerelation_info
	rulerelation_left
	rulecardinality_left
	rulerelation_right
	rulecardinality_right
	rulecluster_attribute
	ruletitle_attribute
	ruletable_attribute
	rulecolumn_attribute
	rulerelation_attribute
	ruleattribute_key
	ruleattribute_value
	rulebare_value
	rulequoted_value
	ruleattribute_sep
	rulecomment_string
	rulews
	rulenewline
	rulenewline_or_eot
	rulespace
	rulestring
	rulestring_in_quote
	rulecardinality
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
)

var rul3s = [...]string{
	"Unknown",
	"root",
	"EOT",
	"expression",
	"empty_line",
	"comment_line",
	"cluster_info",
	"cluster_end",
	"cluster_start",
	"title_info",
	"table_info",
	"table_title",
	"table_column",
	"column_name",
	"relation_info",
	"relation_left",
	"cardinality_left",
	"relation_right",
	"cardinality_right",
	"cluster_attribute",
	"title_attribute",
	"table_attribute",
	"column_attribute",
	"relation_attribute",
	"attribute_key",
	"attribute_value",
	"bare_value",
	"quoted_value",
	"attribute_sep",
	"comment_string",
	"ws",
	"newline",
	"newline_or_eot",
	"space",
	"string",
	"string_in_quote",
	"cardinality",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Parser struct {
	Erd

	Buffer string
	buffer []rune
	rules  [58]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.Err(begin, buffer)
		case ruleAction1:
			p.Err(begin, buffer)
		case ruleAction2:
			p.ClearTableAndColumn()
		case ruleAction3:
			p.ClearCluster()
		case ruleAction4:
			p.AddCluster()
		case ruleAction5:
			p.AddTable(text)
		case ruleAction6:
			p.AddColumn(text)
		case ruleAction7:
			p.AddRelation()
		case ruleAction8:
			p.SetRelationLeft(text)
		case ruleAction9:
			p.SetCardinalityLeft(text)
		case ruleAction10:
			p.SetRelationRight(text)
		case ruleAction11:
			p.SetCardinalityRight(text)
		case ruleAction12:
			p.AddClusterKeyValue()
		case ruleAction13:
			p.AddTitleKeyValue()
		case ruleAction14:
			p.AddTableKeyValue()
		case ruleAction15:
			p.AddColumnKeyValue()
		case ruleAction16:
			p.AddRelationKeyValue()
		case ruleAction17:
			p.SetKey(text)
		case ruleAction18:
			p.SetValue(text)
		case ruleAction19:
			p.SetValue(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*Parser) error {
	return func(p *Parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Parser) error {
	return func(p *Parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Parser) Init(options ...func(*Parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 root <- <((expression EOT) / (expression <.+> Action0 EOT) / (<.+> Action1 EOT))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[ruleexpression]() {
						goto l3
					}
					if !_rules[ruleEOT]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleexpression]() {
						goto l4
					}
					{
						position5 := position
						if !matchDot() {
							goto l4
						}
					l6:
						{
							position7, tokenIndex7 := position, tokenIndex
							if !matchDot() {
								goto l7
							}
							goto l6
						l7:
							position, tokenIndex = position7, tokenIndex7
						}
						add(rulePegText, position5)
					}
					if !_rules[ruleAction0]() {
						goto l4
					}
					if !_rules[ruleEOT]() {
						goto l4
					}
					goto l2
				l4:
					position, tokenIndex = position2, tokenIndex2
					{
						position8 := position
						if !matchDot() {
							goto l0
						}
					l9:
						{
							position10, tokenIndex10 := position, tokenIndex
							if !matchDot() {
								goto l10
							}
							goto l9
						l10:
							position, tokenIndex = position10, tokenIndex10
						}
						add(rulePegText, position8)
					}
					if !_rules[ruleAction1]() {
						goto l0
					}
					if !_rules[ruleEOT]() {
						goto l0
					}
				}
			l2:
				add(ruleroot, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 EOT <- <!.> */
		func() bool {
			position11, tokenIndex11 := position, tokenIndex
			{
				position12 := position
				{
					position13, tokenIndex13 := position, tokenIndex
					if !matchDot() {
						goto l13
					}
					goto l11
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				add(ruleEOT, position12)
			}
			return true
		l11:
			position, tokenIndex = position11, tokenIndex11
			return false
		},
		/* 2 expression <- <(title_info / relation_info / table_info / comment_line / empty_line / cluster_info / cluster_end)*> */
		func() bool {
			{
				position15 := position
			l16:
				{
					position17, tokenIndex17 := position, tokenIndex
					{
						position18, tokenIndex18 := position, tokenIndex
						if !_rules[ruletitle_info]() {
							goto l19
						}
						goto l18
					l19:
						position, tokenIndex = position18, tokenIndex18
						if !_rules[rulerelation_info]() {
							goto l20
						}
						goto l18
					l20:
						position, tokenIndex = position18, tokenIndex18
						if !_rules[ruletable_info]() {
							goto l21
						}
						goto l18
					l21:
						position, tokenIndex = position18, tokenIndex18
						if !_rules[rulecomment_line]() {
							goto l22
						}
						goto l18
					l22:
						position, tokenIndex = position18, tokenIndex18
						if !_rules[ruleempty_line]() {
							goto l23
						}
						goto l18
					l23:
						position, tokenIndex = position18, tokenIndex18
						if !_rules[rulecluster_info]() {
							goto l24
						}
						goto l18
					l24:
						position, tokenIndex = position18, tokenIndex18
						if !_rules[rulecluster_end]() {
							goto l17
						}
					}
				l18:
					goto l16
				l17:
					position, tokenIndex = position17, tokenIndex17
				}
				add(ruleexpression, position15)
			}
			return true
		},
		/* 3 empty_line <- <(ws Action2)> */
		func() bool {
			position25, tokenIndex25 := position, tokenIndex
			{
				position26 := position
				if !_rules[rulews]() {
					goto l25
				}
				if !_rules[ruleAction2]() {
					goto l25
				}
				add(ruleempty_line, position26)
			}
			return true
		l25:
			position, tokenIndex = position25, tokenIndex25
			return false
		},
		/* 4 comment_line <- <(space* '#' comment_string newline)> */
		func() bool {
			position27, tokenIndex27 := position, tokenIndex
			{
				position28 := position
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				if buffer[position] != rune('#') {
					goto l27
				}
				position++
				if !_rules[rulecomment_string]() {
					goto l27
				}
				if !_rules[rulenewline]() {
					goto l27
				}
				add(rulecomment_line, position28)
			}
			return true
		l27:
			position, tokenIndex = position27, tokenIndex27
			return false
		},
		/* 5 cluster_info <- <(cluster_start ws* '{' ws* (cluster_attribute ws* attribute_sep? ws*)* ws* '}' newline)> */
		func() bool {
			position31, tokenIndex31 := position, tokenIndex
			{
				position32 := position
				if !_rules[rulecluster_start]() {
					goto l31
				}
			l33:
				{
					position34, tokenIndex34 := position, tokenIndex
					if !_rules[rulews]() {
						goto l34
					}
					goto l33
				l34:
					position, tokenIndex = position34, tokenIndex34
				}
				if buffer[position] != rune('{') {
					goto l31
				}
				position++
			l35:
				{
					position36, tokenIndex36 := position, tokenIndex
					if !_rules[rulews]() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position36, tokenIndex36
				}
			l37:
				{
					position38, tokenIndex38 := position, tokenIndex
					if !_rules[rulecluster_attribute]() {
						goto l38
					}
				l39:
					{
						position40, tokenIndex40 := position, tokenIndex
						if !_rules[rulews]() {
							goto l40
						}
						goto l39
					l40:
						position, tokenIndex = position40, tokenIndex40
					}
					{
						position41, tokenIndex41 := position, tokenIndex
						if !_rules[ruleattribute_sep]() {
							goto l41
						}
						goto l42
					l41:
						position, tokenIndex = position41, tokenIndex41
					}
				l42:
				l43:
					{
						position44, tokenIndex44 := position, tokenIndex
						if !_rules[rulews]() {
							goto l44
						}
						goto l43
					l44:
						position, tokenIndex = position44, tokenIndex44
					}
					goto l37
				l38:
					position, tokenIndex = position38, tokenIndex38
				}
			l45:
				{
					position46, tokenIndex46 := position, tokenIndex
					if !_rules[rulews]() {
						goto l46
					}
					goto l45
				l46:
					position, tokenIndex = position46, tokenIndex46
				}
				if buffer[position] != rune('}') {
					goto l31
				}
				position++
				if !_rules[rulenewline]() {
					goto l31
				}
				add(rulecluster_info, position32)
			}
			return true
		l31:
			position, tokenIndex = position31, tokenIndex31
			return false
		},
		/* 6 cluster_end <- <('c' 'l' 'u' 's' 't' 'e' 'r' '_' 'e' 'n' 'd' newline_or_eot Action3)> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				if buffer[position] != rune('c') {
					goto l47
				}
				position++
				if buffer[position] != rune('l') {
					goto l47
				}
				position++
				if buffer[position] != rune('u') {
					goto l47
				}
				position++
				if buffer[position] != rune('s') {
					goto l47
				}
				position++
				if buffer[position] != rune('t') {
					goto l47
				}
				position++
				if buffer[position] != rune('e') {
					goto l47
				}
				position++
				if buffer[position] != rune('r') {
					goto l47
				}
				position++
				if buffer[position] != rune('_') {
					goto l47
				}
				position++
				if buffer[position] != rune('e') {
					goto l47
				}
				position++
				if buffer[position] != rune('n') {
					goto l47
				}
				position++
				if buffer[position] != rune('d') {
					goto l47
				}
				position++
				if !_rules[rulenewline_or_eot]() {
					goto l47
				}
				if !_rules[ruleAction3]() {
					goto l47
				}
				add(rulecluster_end, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 7 cluster_start <- <('c' 'l' 'u' 's' 't' 'e' 'r' Action4)> */
		func() bool {
			position49, tokenIndex49 := position, tokenIndex
			{
				position50 := position
				if buffer[position] != rune('c') {
					goto l49
				}
				position++
				if buffer[position] != rune('l') {
					goto l49
				}
				position++
				if buffer[position] != rune('u') {
					goto l49
				}
				position++
				if buffer[position] != rune('s') {
					goto l49
				}
				position++
				if buffer[position] != rune('t') {
					goto l49
				}
				position++
				if buffer[position] != rune('e') {
					goto l49
				}
				position++
				if buffer[position] != rune('r') {
					goto l49
				}
				position++
				if !_rules[ruleAction4]() {
					goto l49
				}
				add(rulecluster_start, position50)
			}
			return true
		l49:
			position, tokenIndex = position49, tokenIndex49
			return false
		},
		/* 8 title_info <- <('t' 'i' 't' 'l' 'e' ws* '{' ws* (title_attribute ws* attribute_sep? ws*)* ws* '}' newline)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if buffer[position] != rune('t') {
					goto l51
				}
				position++
				if buffer[position] != rune('i') {
					goto l51
				}
				position++
				if buffer[position] != rune('t') {
					goto l51
				}
				position++
				if buffer[position] != rune('l') {
					goto l51
				}
				position++
				if buffer[position] != rune('e') {
					goto l51
				}
				position++
			l53:
				{
					position54, tokenIndex54 := position, tokenIndex
					if !_rules[rulews]() {
						goto l54
					}
					goto l53
				l54:
					position, tokenIndex = position54, tokenIndex54
				}
				if buffer[position] != rune('{') {
					goto l51
				}
				position++
			l55:
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[rulews]() {
						goto l56
					}
					goto l55
				l56:
					position, tokenIndex = position56, tokenIndex56
				}
			l57:
				{
					position58, tokenIndex58 := position, tokenIndex
					if !_rules[ruletitle_attribute]() {
						goto l58
					}
				l59:
					{
						position60, tokenIndex60 := position, tokenIndex
						if !_rules[rulews]() {
							goto l60
						}
						goto l59
					l60:
						position, tokenIndex = position60, tokenIndex60
					}
					{
						position61, tokenIndex61 := position, tokenIndex
						if !_rules[ruleattribute_sep]() {
							goto l61
						}
						goto l62
					l61:
						position, tokenIndex = position61, tokenIndex61
					}
				l62:
				l63:
					{
						position64, tokenIndex64 := position, tokenIndex
						if !_rules[rulews]() {
							goto l64
						}
						goto l63
					l64:
						position, tokenIndex = position64, tokenIndex64
					}
					goto l57
				l58:
					position, tokenIndex = position58, tokenIndex58
				}
			l65:
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[rulews]() {
						goto l66
					}
					goto l65
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
				if buffer[position] != rune('}') {
					goto l51
				}
				position++
				if !_rules[rulenewline]() {
					goto l51
				}
				add(ruletitle_info, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 9 table_info <- <('[' table_title ']' (space* '{' ws* (table_attribute ws* attribute_sep?)* ws* '}' space*)? newline_or_eot (table_column / empty_line)*)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if buffer[position] != rune('[') {
					goto l67
				}
				position++
				if !_rules[ruletable_title]() {
					goto l67
				}
				if buffer[position] != rune(']') {
					goto l67
				}
				position++
				{
					position69, tokenIndex69 := position, tokenIndex
				l71:
					{
						position72, tokenIndex72 := position, tokenIndex
						if !_rules[rulespace]() {
							goto l72
						}
						goto l71
					l72:
						position, tokenIndex = position72, tokenIndex72
					}
					if buffer[position] != rune('{') {
						goto l69
					}
					position++
				l73:
					{
						position74, tokenIndex74 := position, tokenIndex
						if !_rules[rulews]() {
							goto l74
						}
						goto l73
					l74:
						position, tokenIndex = position74, tokenIndex74
					}
				l75:
					{
						position76, tokenIndex76 := position, tokenIndex
						if !_rules[ruletable_attribute]() {
							goto l76
						}
					l77:
						{
							position78, tokenIndex78 := position, tokenIndex
							if !_rules[rulews]() {
								goto l78
							}
							goto l77
						l78:
							position, tokenIndex = position78, tokenIndex78
						}
						{
							position79, tokenIndex79 := position, tokenIndex
							if !_rules[ruleattribute_sep]() {
								goto l79
							}
							goto l80
						l79:
							position, tokenIndex = position79, tokenIndex79
						}
					l80:
						goto l75
					l76:
						position, tokenIndex = position76, tokenIndex76
					}
				l81:
					{
						position82, tokenIndex82 := position, tokenIndex
						if !_rules[rulews]() {
							goto l82
						}
						goto l81
					l82:
						position, tokenIndex = position82, tokenIndex82
					}
					if buffer[position] != rune('}') {
						goto l69
					}
					position++
				l83:
					{
						position84, tokenIndex84 := position, tokenIndex
						if !_rules[rulespace]() {
							goto l84
						}
						goto l83
					l84:
						position, tokenIndex = position84, tokenIndex84
					}
					goto l70
				l69:
					position, tokenIndex = position69, tokenIndex69
				}
			l70:
				if !_rules[rulenewline_or_eot]() {
					goto l67
				}
			l85:
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position87, tokenIndex87 := position, tokenIndex
						if !_rules[ruletable_column]() {
							goto l88
						}
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if !_rules[ruleempty_line]() {
							goto l86
						}
					}
				l87:
					goto l85
				l86:
					position, tokenIndex = position86, tokenIndex86
				}
				add(ruletable_info, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 10 table_title <- <(<string> Action5)> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				{
					position91 := position
					if !_rules[rulestring]() {
						goto l89
					}
					add(rulePegText, position91)
				}
				if !_rules[ruleAction5]() {
					goto l89
				}
				add(ruletable_title, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 11 table_column <- <(space* column_name (space* '{' ws* (column_attribute ws* attribute_sep?)* ws* '}' space*)? newline_or_eot)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
			l94:
				{
					position95, tokenIndex95 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position95, tokenIndex95
				}
				if !_rules[rulecolumn_name]() {
					goto l92
				}
				{
					position96, tokenIndex96 := position, tokenIndex
				l98:
					{
						position99, tokenIndex99 := position, tokenIndex
						if !_rules[rulespace]() {
							goto l99
						}
						goto l98
					l99:
						position, tokenIndex = position99, tokenIndex99
					}
					if buffer[position] != rune('{') {
						goto l96
					}
					position++
				l100:
					{
						position101, tokenIndex101 := position, tokenIndex
						if !_rules[rulews]() {
							goto l101
						}
						goto l100
					l101:
						position, tokenIndex = position101, tokenIndex101
					}
				l102:
					{
						position103, tokenIndex103 := position, tokenIndex
						if !_rules[rulecolumn_attribute]() {
							goto l103
						}
					l104:
						{
							position105, tokenIndex105 := position, tokenIndex
							if !_rules[rulews]() {
								goto l105
							}
							goto l104
						l105:
							position, tokenIndex = position105, tokenIndex105
						}
						{
							position106, tokenIndex106 := position, tokenIndex
							if !_rules[ruleattribute_sep]() {
								goto l106
							}
							goto l107
						l106:
							position, tokenIndex = position106, tokenIndex106
						}
					l107:
						goto l102
					l103:
						position, tokenIndex = position103, tokenIndex103
					}
				l108:
					{
						position109, tokenIndex109 := position, tokenIndex
						if !_rules[rulews]() {
							goto l109
						}
						goto l108
					l109:
						position, tokenIndex = position109, tokenIndex109
					}
					if buffer[position] != rune('}') {
						goto l96
					}
					position++
				l110:
					{
						position111, tokenIndex111 := position, tokenIndex
						if !_rules[rulespace]() {
							goto l111
						}
						goto l110
					l111:
						position, tokenIndex = position111, tokenIndex111
					}
					goto l97
				l96:
					position, tokenIndex = position96, tokenIndex96
				}
			l97:
				if !_rules[rulenewline_or_eot]() {
					goto l92
				}
				add(ruletable_column, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 12 column_name <- <(<string> Action6)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				{
					position114 := position
					if !_rules[rulestring]() {
						goto l112
					}
					add(rulePegText, position114)
				}
				if !_rules[ruleAction6]() {
					goto l112
				}
				add(rulecolumn_name, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 13 relation_info <- <(space* relation_left space* cardinality_left ('-' '-') cardinality_right space* relation_right (ws* '{' ws* (relation_attribute ws* attribute_sep? ws*)* ws* '}')? newline_or_eot Action7)> */
		func() bool {
			position115, tokenIndex115 := position, tokenIndex
			{
				position116 := position
			l117:
				{
					position118, tokenIndex118 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l118
					}
					goto l117
				l118:
					position, tokenIndex = position118, tokenIndex118
				}
				if !_rules[rulerelation_left]() {
					goto l115
				}
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l120
					}
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				if !_rules[rulecardinality_left]() {
					goto l115
				}
				if buffer[position] != rune('-') {
					goto l115
				}
				position++
				if buffer[position] != rune('-') {
					goto l115
				}
				position++
				if !_rules[rulecardinality_right]() {
					goto l115
				}
			l121:
				{
					position122, tokenIndex122 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l122
					}
					goto l121
				l122:
					position, tokenIndex = position122, tokenIndex122
				}
				if !_rules[rulerelation_right]() {
					goto l115
				}
				{
					position123, tokenIndex123 := position, tokenIndex
				l125:
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[rulews]() {
							goto l126
						}
						goto l125
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
					if buffer[position] != rune('{') {
						goto l123
					}
					position++
				l127:
					{
						position128, tokenIndex128 := position, tokenIndex
						if !_rules[rulews]() {
							goto l128
						}
						goto l127
					l128:
						position, tokenIndex = position128, tokenIndex128
					}
				l129:
					{
						position130, tokenIndex130 := position, tokenIndex
						if !_rules[rulerelation_attribute]() {
							goto l130
						}
					l131:
						{
							position132, tokenIndex132 := position, tokenIndex
							if !_rules[rulews]() {
								goto l132
							}
							goto l131
						l132:
							position, tokenIndex = position132, tokenIndex132
						}
						{
							position133, tokenIndex133 := position, tokenIndex
							if !_rules[ruleattribute_sep]() {
								goto l133
							}
							goto l134
						l133:
							position, tokenIndex = position133, tokenIndex133
						}
					l134:
					l135:
						{
							position136, tokenIndex136 := position, tokenIndex
							if !_rules[rulews]() {
								goto l136
							}
							goto l135
						l136:
							position, tokenIndex = position136, tokenIndex136
						}
						goto l129
					l130:
						position, tokenIndex = position130, tokenIndex130
					}
				l137:
					{
						position138, tokenIndex138 := position, tokenIndex
						if !_rules[rulews]() {
							goto l138
						}
						goto l137
					l138:
						position, tokenIndex = position138, tokenIndex138
					}
					if buffer[position] != rune('}') {
						goto l123
					}
					position++
					goto l124
				l123:
					position, tokenIndex = position123, tokenIndex123
				}
			l124:
				if !_rules[rulenewline_or_eot]() {
					goto l115
				}
				if !_rules[ruleAction7]() {
					goto l115
				}
				add(rulerelation_info, position116)
			}
			return true
		l115:
			position, tokenIndex = position115, tokenIndex115
			return false
		},
		/* 14 relation_left <- <(<string> Action8)> */
		func() bool {
			position139, tokenIndex139 := position, tokenIndex
			{
				position140 := position
				{
					position141 := position
					if !_rules[rulestring]() {
						goto l139
					}
					add(rulePegText, position141)
				}
				if !_rules[ruleAction8]() {
					goto l139
				}
				add(rulerelation_left, position140)
			}
			return true
		l139:
			position, tokenIndex = position139, tokenIndex139
			return false
		},
		/* 15 cardinality_left <- <(<cardinality> Action9)> */
		func() bool {
			position142, tokenIndex142 := position, tokenIndex
			{
				position143 := position
				{
					position144 := position
					if !_rules[rulecardinality]() {
						goto l142
					}
					add(rulePegText, position144)
				}
				if !_rules[ruleAction9]() {
					goto l142
				}
				add(rulecardinality_left, position143)
			}
			return true
		l142:
			position, tokenIndex = position142, tokenIndex142
			return false
		},
		/* 16 relation_right <- <(<string> Action10)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				{
					position147 := position
					if !_rules[rulestring]() {
						goto l145
					}
					add(rulePegText, position147)
				}
				if !_rules[ruleAction10]() {
					goto l145
				}
				add(rulerelation_right, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 17 cardinality_right <- <(<cardinality> Action11)> */
		func() bool {
			position148, tokenIndex148 := position, tokenIndex
			{
				position149 := position
				{
					position150 := position
					if !_rules[rulecardinality]() {
						goto l148
					}
					add(rulePegText, position150)
				}
				if !_rules[ruleAction11]() {
					goto l148
				}
				add(rulecardinality_right, position149)
			}
			return true
		l148:
			position, tokenIndex = position148, tokenIndex148
			return false
		},
		/* 18 cluster_attribute <- <(attribute_key space* ':' space* attribute_value Action12)> */
		func() bool {
			position151, tokenIndex151 := position, tokenIndex
			{
				position152 := position
				if !_rules[ruleattribute_key]() {
					goto l151
				}
			l153:
				{
					position154, tokenIndex154 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l154
					}
					goto l153
				l154:
					position, tokenIndex = position154, tokenIndex154
				}
				if buffer[position] != rune(':') {
					goto l151
				}
				position++
			l155:
				{
					position156, tokenIndex156 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l156
					}
					goto l155
				l156:
					position, tokenIndex = position156, tokenIndex156
				}
				if !_rules[ruleattribute_value]() {
					goto l151
				}
				if !_rules[ruleAction12]() {
					goto l151
				}
				add(rulecluster_attribute, position152)
			}
			return true
		l151:
			position, tokenIndex = position151, tokenIndex151
			return false
		},
		/* 19 title_attribute <- <(attribute_key space* ':' space* attribute_value Action13)> */
		func() bool {
			position157, tokenIndex157 := position, tokenIndex
			{
				position158 := position
				if !_rules[ruleattribute_key]() {
					goto l157
				}
			l159:
				{
					position160, tokenIndex160 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l160
					}
					goto l159
				l160:
					position, tokenIndex = position160, tokenIndex160
				}
				if buffer[position] != rune(':') {
					goto l157
				}
				position++
			l161:
				{
					position162, tokenIndex162 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l162
					}
					goto l161
				l162:
					position, tokenIndex = position162, tokenIndex162
				}
				if !_rules[ruleattribute_value]() {
					goto l157
				}
				if !_rules[ruleAction13]() {
					goto l157
				}
				add(ruletitle_attribute, position158)
			}
			return true
		l157:
			position, tokenIndex = position157, tokenIndex157
			return false
		},
		/* 20 table_attribute <- <(attribute_key space* ':' space* attribute_value Action14)> */
		func() bool {
			position163, tokenIndex163 := position, tokenIndex
			{
				position164 := position
				if !_rules[ruleattribute_key]() {
					goto l163
				}
			l165:
				{
					position166, tokenIndex166 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l166
					}
					goto l165
				l166:
					position, tokenIndex = position166, tokenIndex166
				}
				if buffer[position] != rune(':') {
					goto l163
				}
				position++
			l167:
				{
					position168, tokenIndex168 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l168
					}
					goto l167
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
				if !_rules[ruleattribute_value]() {
					goto l163
				}
				if !_rules[ruleAction14]() {
					goto l163
				}
				add(ruletable_attribute, position164)
			}
			return true
		l163:
			position, tokenIndex = position163, tokenIndex163
			return false
		},
		/* 21 column_attribute <- <(attribute_key space* ':' space* attribute_value Action15)> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				if !_rules[ruleattribute_key]() {
					goto l169
				}
			l171:
				{
					position172, tokenIndex172 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l172
					}
					goto l171
				l172:
					position, tokenIndex = position172, tokenIndex172
				}
				if buffer[position] != rune(':') {
					goto l169
				}
				position++
			l173:
				{
					position174, tokenIndex174 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l174
					}
					goto l173
				l174:
					position, tokenIndex = position174, tokenIndex174
				}
				if !_rules[ruleattribute_value]() {
					goto l169
				}
				if !_rules[ruleAction15]() {
					goto l169
				}
				add(rulecolumn_attribute, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 22 relation_attribute <- <(attribute_key space* ':' space* attribute_value Action16)> */
		func() bool {
			position175, tokenIndex175 := position, tokenIndex
			{
				position176 := position
				if !_rules[ruleattribute_key]() {
					goto l175
				}
			l177:
				{
					position178, tokenIndex178 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l178
					}
					goto l177
				l178:
					position, tokenIndex = position178, tokenIndex178
				}
				if buffer[position] != rune(':') {
					goto l175
				}
				position++
			l179:
				{
					position180, tokenIndex180 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
				if !_rules[ruleattribute_value]() {
					goto l175
				}
				if !_rules[ruleAction16]() {
					goto l175
				}
				add(rulerelation_attribute, position176)
			}
			return true
		l175:
			position, tokenIndex = position175, tokenIndex175
			return false
		},
		/* 23 attribute_key <- <(<string> Action17)> */
		func() bool {
			position181, tokenIndex181 := position, tokenIndex
			{
				position182 := position
				{
					position183 := position
					if !_rules[rulestring]() {
						goto l181
					}
					add(rulePegText, position183)
				}
				if !_rules[ruleAction17]() {
					goto l181
				}
				add(ruleattribute_key, position182)
			}
			return true
		l181:
			position, tokenIndex = position181, tokenIndex181
			return false
		},
		/* 24 attribute_value <- <(bare_value / quoted_value)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				{
					position186, tokenIndex186 := position, tokenIndex
					if !_rules[rulebare_value]() {
						goto l187
					}
					goto l186
				l187:
					position, tokenIndex = position186, tokenIndex186
					if !_rules[rulequoted_value]() {
						goto l184
					}
				}
			l186:
				add(ruleattribute_value, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 25 bare_value <- <(<string> Action18)> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				{
					position190 := position
					if !_rules[rulestring]() {
						goto l188
					}
					add(rulePegText, position190)
				}
				if !_rules[ruleAction18]() {
					goto l188
				}
				add(rulebare_value, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 26 quoted_value <- <(<('"' string_in_quote '"')> Action19)> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				{
					position193 := position
					if buffer[position] != rune('"') {
						goto l191
					}
					position++
					if !_rules[rulestring_in_quote]() {
						goto l191
					}
					if buffer[position] != rune('"') {
						goto l191
					}
					position++
					add(rulePegText, position193)
				}
				if !_rules[ruleAction19]() {
					goto l191
				}
				add(rulequoted_value, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 27 attribute_sep <- <(space* ',' space*)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
			l196:
				{
					position197, tokenIndex197 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l197
					}
					goto l196
				l197:
					position, tokenIndex = position197, tokenIndex197
				}
				if buffer[position] != rune(',') {
					goto l194
				}
				position++
			l198:
				{
					position199, tokenIndex199 := position, tokenIndex
					if !_rules[rulespace]() {
						goto l199
					}
					goto l198
				l199:
					position, tokenIndex = position199, tokenIndex199
				}
				add(ruleattribute_sep, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 28 comment_string <- <(!('\r' / '\n') .)*> */
		func() bool {
			{
				position201 := position
			l202:
				{
					position203, tokenIndex203 := position, tokenIndex
					{
						position204, tokenIndex204 := position, tokenIndex
						{
							position205, tokenIndex205 := position, tokenIndex
							if buffer[position] != rune('\r') {
								goto l206
							}
							position++
							goto l205
						l206:
							position, tokenIndex = position205, tokenIndex205
							if buffer[position] != rune('\n') {
								goto l204
							}
							position++
						}
					l205:
						goto l203
					l204:
						position, tokenIndex = position204, tokenIndex204
					}
					if !matchDot() {
						goto l203
					}
					goto l202
				l203:
					position, tokenIndex = position203, tokenIndex203
				}
				add(rulecomment_string, position201)
			}
			return true
		},
		/* 29 ws <- <(' ' / '\t' / '\r' / '\n')+> */
		func() bool {
			position207, tokenIndex207 := position, tokenIndex
			{
				position208 := position
				{
					position211, tokenIndex211 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l212
					}
					position++
					goto l211
				l212:
					position, tokenIndex = position211, tokenIndex211
					if buffer[position] != rune('\t') {
						goto l213
					}
					position++
					goto l211
				l213:
					position, tokenIndex = position211, tokenIndex211
					if buffer[position] != rune('\r') {
						goto l214
					}
					position++
					goto l211
				l214:
					position, tokenIndex = position211, tokenIndex211
					if buffer[position] != rune('\n') {
						goto l207
					}
					position++
				}
			l211:
			l209:
				{
					position210, tokenIndex210 := position, tokenIndex
					{
						position215, tokenIndex215 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l216
						}
						position++
						goto l215
					l216:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('\t') {
							goto l217
						}
						position++
						goto l215
					l217:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('\r') {
							goto l218
						}
						position++
						goto l215
					l218:
						position, tokenIndex = position215, tokenIndex215
						if buffer[position] != rune('\n') {
							goto l210
						}
						position++
					}
				l215:
					goto l209
				l210:
					position, tokenIndex = position210, tokenIndex210
				}
				add(rulews, position208)
			}
			return true
		l207:
			position, tokenIndex = position207, tokenIndex207
			return false
		},
		/* 30 newline <- <(('\r' '\n') / '\n' / '\r')> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				{
					position221, tokenIndex221 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l222
					}
					position++
					if buffer[position] != rune('\n') {
						goto l222
					}
					position++
					goto l221
				l222:
					position, tokenIndex = position221, tokenIndex221
					if buffer[position] != rune('\n') {
						goto l223
					}
					position++
					goto l221
				l223:
					position, tokenIndex = position221, tokenIndex221
					if buffer[position] != rune('\r') {
						goto l219
					}
					position++
				}
			l221:
				add(rulenewline, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 31 newline_or_eot <- <(newline / EOT)> */
		func() bool {
			position224, tokenIndex224 := position, tokenIndex
			{
				position225 := position
				{
					position226, tokenIndex226 := position, tokenIndex
					if !_rules[rulenewline]() {
						goto l227
					}
					goto l226
				l227:
					position, tokenIndex = position226, tokenIndex226
					if !_rules[ruleEOT]() {
						goto l224
					}
				}
			l226:
				add(rulenewline_or_eot, position225)
			}
			return true
		l224:
			position, tokenIndex = position224, tokenIndex224
			return false
		},
		/* 32 space <- <(' ' / '\t')+> */
		func() bool {
			position228, tokenIndex228 := position, tokenIndex
			{
				position229 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					if buffer[position] != rune(' ') {
						goto l233
					}
					position++
					goto l232
				l233:
					position, tokenIndex = position232, tokenIndex232
					if buffer[position] != rune('\t') {
						goto l228
					}
					position++
				}
			l232:
			l230:
				{
					position231, tokenIndex231 := position, tokenIndex
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('\t') {
							goto l231
						}
						position++
					}
				l234:
					goto l230
				l231:
					position, tokenIndex = position231, tokenIndex231
				}
				add(rulespace, position229)
			}
			return true
		l228:
			position, tokenIndex = position228, tokenIndex228
			return false
		},
		/* 33 string <- <(!('"' / '\t' / '\r' / '\n' / '/' / ':' / ',' / '[' / ']' / '{' / '}' / ' ') .)+> */
		func() bool {
			position236, tokenIndex236 := position, tokenIndex
			{
				position237 := position
				{
					position240, tokenIndex240 := position, tokenIndex
					{
						position241, tokenIndex241 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l242
						}
						position++
						goto l241
					l242:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('\t') {
							goto l243
						}
						position++
						goto l241
					l243:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('\r') {
							goto l244
						}
						position++
						goto l241
					l244:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('\n') {
							goto l245
						}
						position++
						goto l241
					l245:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('/') {
							goto l246
						}
						position++
						goto l241
					l246:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune(':') {
							goto l247
						}
						position++
						goto l241
					l247:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune(',') {
							goto l248
						}
						position++
						goto l241
					l248:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('[') {
							goto l249
						}
						position++
						goto l241
					l249:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune(']') {
							goto l250
						}
						position++
						goto l241
					l250:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('{') {
							goto l251
						}
						position++
						goto l241
					l251:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune('}') {
							goto l252
						}
						position++
						goto l241
					l252:
						position, tokenIndex = position241, tokenIndex241
						if buffer[position] != rune(' ') {
							goto l240
						}
						position++
					}
				l241:
					goto l236
				l240:
					position, tokenIndex = position240, tokenIndex240
				}
				if !matchDot() {
					goto l236
				}
			l238:
				{
					position239, tokenIndex239 := position, tokenIndex
					{
						position253, tokenIndex253 := position, tokenIndex
						{
							position254, tokenIndex254 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l255
							}
							position++
							goto l254
						l255:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('\t') {
								goto l256
							}
							position++
							goto l254
						l256:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('\r') {
								goto l257
							}
							position++
							goto l254
						l257:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('\n') {
								goto l258
							}
							position++
							goto l254
						l258:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('/') {
								goto l259
							}
							position++
							goto l254
						l259:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune(':') {
								goto l260
							}
							position++
							goto l254
						l260:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune(',') {
								goto l261
							}
							position++
							goto l254
						l261:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('[') {
								goto l262
							}
							position++
							goto l254
						l262:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune(']') {
								goto l263
							}
							position++
							goto l254
						l263:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('{') {
								goto l264
							}
							position++
							goto l254
						l264:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune('}') {
								goto l265
							}
							position++
							goto l254
						l265:
							position, tokenIndex = position254, tokenIndex254
							if buffer[position] != rune(' ') {
								goto l253
							}
							position++
						}
					l254:
						goto l239
					l253:
						position, tokenIndex = position253, tokenIndex253
					}
					if !matchDot() {
						goto l239
					}
					goto l238
				l239:
					position, tokenIndex = position239, tokenIndex239
				}
				add(rulestring, position237)
			}
			return true
		l236:
			position, tokenIndex = position236, tokenIndex236
			return false
		},
		/* 34 string_in_quote <- <(!('"' / '\t' / '\r' / '\n') .)+> */
		func() bool {
			position266, tokenIndex266 := position, tokenIndex
			{
				position267 := position
				{
					position270, tokenIndex270 := position, tokenIndex
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('"') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('\t') {
							goto l273
						}
						position++
						goto l271
					l273:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('\r') {
							goto l274
						}
						position++
						goto l271
					l274:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('\n') {
							goto l270
						}
						position++
					}
				l271:
					goto l266
				l270:
					position, tokenIndex = position270, tokenIndex270
				}
				if !matchDot() {
					goto l266
				}
			l268:
				{
					position269, tokenIndex269 := position, tokenIndex
					{
						position275, tokenIndex275 := position, tokenIndex
						{
							position276, tokenIndex276 := position, tokenIndex
							if buffer[position] != rune('"') {
								goto l277
							}
							position++
							goto l276
						l277:
							position, tokenIndex = position276, tokenIndex276
							if buffer[position] != rune('\t') {
								goto l278
							}
							position++
							goto l276
						l278:
							position, tokenIndex = position276, tokenIndex276
							if buffer[position] != rune('\r') {
								goto l279
							}
							position++
							goto l276
						l279:
							position, tokenIndex = position276, tokenIndex276
							if buffer[position] != rune('\n') {
								goto l275
							}
							position++
						}
					l276:
						goto l269
					l275:
						position, tokenIndex = position275, tokenIndex275
					}
					if !matchDot() {
						goto l269
					}
					goto l268
				l269:
					position, tokenIndex = position269, tokenIndex269
				}
				add(rulestring_in_quote, position267)
			}
			return true
		l266:
			position, tokenIndex = position266, tokenIndex266
			return false
		},
		/* 35 cardinality <- <('0' / '1' / '*' / '+' / '-')> */
		func() bool {
			position280, tokenIndex280 := position, tokenIndex
			{
				position281 := position
				{
					position282, tokenIndex282 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l283
					}
					position++
					goto l282
				l283:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('1') {
						goto l284
					}
					position++
					goto l282
				l284:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('*') {
						goto l285
					}
					position++
					goto l282
				l285:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('+') {
						goto l286
					}
					position++
					goto l282
				l286:
					position, tokenIndex = position282, tokenIndex282
					if buffer[position] != rune('-') {
						goto l280
					}
					position++
				}
			l282:
				add(rulecardinality, position281)
			}
			return true
		l280:
			position, tokenIndex = position280, tokenIndex280
			return false
		},
		nil,
		/* 38 Action0 <- <{p.Err(begin, buffer)}> */
		func() bool {
			{
				add(ruleAction0, position)
			}
			return true
		},
		/* 39 Action1 <- <{p.Err(begin, buffer)}> */
		func() bool {
			{
				add(ruleAction1, position)
			}
			return true
		},
		/* 40 Action2 <- <{ p.ClearTableAndColumn() }> */
		func() bool {
			{
				add(ruleAction2, position)
			}
			return true
		},
		/* 41 Action3 <- <{ p.ClearCluster() }> */
		func() bool {
			{
				add(ruleAction3, position)
			}
			return true
		},
		/* 42 Action4 <- <{ p.AddCluster() }> */
		func() bool {
			{
				add(ruleAction4, position)
			}
			return true
		},
		/* 43 Action5 <- <{ p.AddTable(text) }> */
		func() bool {
			{
				add(ruleAction5, position)
			}
			return true
		},
		/* 44 Action6 <- <{ p.AddColumn(text) }> */
		func() bool {
			{
				add(ruleAction6, position)
			}
			return true
		},
		/* 45 Action7 <- <{ p.AddRelation() }> */
		func() bool {
			{
				add(ruleAction7, position)
			}
			return true
		},
		/* 46 Action8 <- <{ p.SetRelationLeft(text) }> */
		func() bool {
			{
				add(ruleAction8, position)
			}
			return true
		},
		/* 47 Action9 <- <{ p.SetCardinalityLeft(text)}> */
		func() bool {
			{
				add(ruleAction9, position)
			}
			return true
		},
		/* 48 Action10 <- <{ p.SetRelationRight(text) }> */
		func() bool {
			{
				add(ruleAction10, position)
			}
			return true
		},
		/* 49 Action11 <- <{ p.SetCardinalityRight(text)}> */
		func() bool {
			{
				add(ruleAction11, position)
			}
			return true
		},
		/* 50 Action12 <- <{ p.AddClusterKeyValue() }> */
		func() bool {
			{
				add(ruleAction12, position)
			}
			return true
		},
		/* 51 Action13 <- <{ p.AddTitleKeyValue() }> */
		func() bool {
			{
				add(ruleAction13, position)
			}
			return true
		},
		/* 52 Action14 <- <{ p.AddTableKeyValue() }> */
		func() bool {
			{
				add(ruleAction14, position)
			}
			return true
		},
		/* 53 Action15 <- <{ p.AddColumnKeyValue() }> */
		func() bool {
			{
				add(ruleAction15, position)
			}
			return true
		},
		/* 54 Action16 <- <{ p.AddRelationKeyValue() }> */
		func() bool {
			{
				add(ruleAction16, position)
			}
			return true
		},
		/* 55 Action17 <- <{ p.SetKey(text) }> */
		func() bool {
			{
				add(ruleAction17, position)
			}
			return true
		},
		/* 56 Action18 <- <{ p.SetValue(text) }> */
		func() bool {
			{
				add(ruleAction18, position)
			}
			return true
		},
		/* 57 Action19 <- <{ p.SetValue(text) }> */
		func() bool {
			{
				add(ruleAction19, position)
			}
			return true
		},
	}
	p.rules = _rules
	return nil
}
