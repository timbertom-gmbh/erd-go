// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_subgraphs.tmpl
// templates/dot_tables.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xd1\x0b\xd3\x30\x10\xc6\xdf\xfb\x57\x84\x3c\x77\xb1\xab\x0a\x8a\xcb\xc0\x07\x85\x81\x6c\xa2\x7b\x52\x44\xd2\xe6\xd6\x46\xb3\x4b\x49\xae\x0c\x0c\xfd\xdf\xa5\xed\x46\xdb\x39\x66\x1f\xca\xf1\xbb\xcb\xf7\x7d\x24\x17\xe3\x8a\x69\x38\x19\x04\xc6\xb5\x23\xce\x56\x5d\x97\x54\x5e\x35\x35\x8b\x09\x63\x8c\x8d\xf5\xf7\xa1\xee\xbf\xfe\x80\x39\x31\x71\x34\x64\x61\xfc\xbf\x27\xf2\xa6\x68\x09\x82\xb0\xaa\x00\x3b\x68\xdc\xe6\x07\x22\x37\x9b\x8f\x87\xfd\x91\x7d\x3e\xec\xf6\xc7\xd5\xd7\xdd\xb7\x0f\x92\xe7\x19\xdf\xc6\xf8\x4c\xa7\xeb\x36\x2f\xfa\x63\xdb\x6d\xba\x94\xfb\xd5\x06\x92\xf6\x0e\x5a\x57\x4a\x4a\x17\x39\x01\xf5\x22\x0b\x3a\x0d\x01\x1a\x99\x89\xd7\xd3\xa0\x57\xf8\xfb\x1f\xd8\x28\x2d\x79\x26\xf2\x34\x13\x39\x9f\xf0\x59\xf9\xca\x60\xdf\xc9\x66\xb4\x04\x2c\x01\xc9\x2b\x02\x49\xbe\x85\xa9\x13\x1a\x6b\x10\x82\xe4\x63\xc1\x97\xae\xda\x78\xf9\xe9\xcb\x80\x7e\xbc\x4b\x6e\x01\x67\x77\x7d\x72\x48\xc1\xfc\x01\xb9\x7e\xf5\x20\xc3\x4c\xad\x01\xbc\x18\x4d\xb5\x5c\x8b\x6c\xe6\x5e\xab\x06\x24\x3a\x84\xb9\x07\xe8\x6a\xee\xd1\x87\x28\x1c\xd5\xe9\x03\xd7\x7c\x82\xca\x7b\x77\x19\x68\x26\xde\xfe\xcf\x78\x78\x0f\x85\x95\x05\xf9\x32\xbf\xc3\xda\x04\x52\x58\x82\x5c\x8b\x37\xf3\x58\x31\x12\x9c\x1b\xab\x68\x5c\xc4\x9f\xa1\x2d\x86\xd5\x0b\x9c\x89\xeb\x13\xde\x8f\x78\xb0\x8a\x8c\xc3\x27\x23\xa4\x0a\x0b\xd7\x7e\x97\xc4\x08\xa8\xbb\xee\x6f\x00\x00\x00\xff\xff\xcc\x0a\xe7\x03\xf4\x02\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 756, mode: os.FileMode(436), modTime: time.Unix(1592671525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x51\x4b\xc3\x30\x10\xc7\xdf\xfb\x29\x8e\x3e\x39\x5d\xab\x7b\x76\x1d\x88\xe0\x93\x54\x18\x7b\x13\x91\xab\xbd\x6e\x81\x98\x60\x1a\x19\x12\xee\xbb\x4b\x6a\xd7\xd5\x25\x1d\xfa\x76\x1c\xb7\xdf\xff\x72\xbf\xd5\xb9\x9a\x1a\xa1\x08\xd2\x5a\xdb\x57\x43\x12\xad\xd0\xaa\x4d\x99\x13\xe7\x0c\xaa\x2d\x41\xbe\x3e\x74\x99\x13\x00\xe7\xf2\x47\x6a\xec\x06\x2b\x49\x25\xbe\x13\x33\x64\x99\xef\xae\xc5\x76\xf7\xab\xfd\x9c\x00\xf8\xf9\x0c\x44\x03\x17\xf4\x01\x3f\x23\xf7\x68\x6a\xa1\x50\x0a\xfb\x05\xe9\x65\x3a\x83\xac\xe3\x02\xa0\x31\x7a\xbf\x23\xac\x0b\xfd\x66\xf4\x7e\xee\x4b\x89\x15\xc9\x62\xb9\x7c\x78\x2a\x37\xab\x9b\x3c\x2f\x97\xd7\x5d\xb9\x9a\x0f\x70\x92\x2d\x9d\x49\xb8\x4a\x67\x71\xbe\x25\x0a\x23\x16\xd3\x11\xe1\x9a\x4a\x2b\xd2\x51\xcc\xe1\x1c\xa3\x4d\x98\x23\x5c\x55\x0f\xd8\xfe\x4e\xc3\xb5\xef\xac\x35\xa2\xfa\xb4\xd4\xe6\x92\xd4\x30\x26\x49\x15\x9e\x1e\x9d\x62\xfe\x3f\xdb\xaf\x7d\xa4\x9f\x3e\x62\xe2\x07\x7f\x7c\x4c\xa7\xc4\xff\x5b\xce\x3b\xb7\x28\x64\xef\xdc\x97\x93\xce\xe3\xca\x03\xfe\x89\xf1\x23\xdd\xab\x0a\x02\x16\x93\x01\xe1\x8e\x83\xf0\x80\xd2\x7f\x15\x51\xdf\x91\x0b\xbd\xdc\x26\xe3\xc6\xa8\xfe\x0e\x00\x00\xff\xff\xf8\x27\x80\xed\x91\x03\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 913, mode: os.FileMode(436), modTime: time.Unix(1592657394, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_subgraphsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\xc1\xf8\xf8\xc7\xfc\xed\xb1\x41\x87\xd2\x63\x1f\xa1\x94\x20\x47\x6b\x57\x64\x23\x07\x69\x7d\x28\xcb\xbe\x7b\xa9\xec\x06\x02\xc9\x45\x1a\xa4\x6f\x77\x86\x51\x0d\x34\xc6\x44\x68\xc3\x2c\x87\xb2\x0c\x53\xf6\x97\xaf\xd2\x9a\x35\xaa\xd9\xa7\x89\xd0\xc9\xe9\x1f\x3a\xc1\x8b\x43\xff\xc6\x4b\x11\xca\xc5\xac\x01\xfe\x68\x1c\xd7\xd7\x83\x6a\x27\x27\x33\x68\x03\x00\xef\xee\xe9\xff\xbe\x2a\xd5\x38\x5e\x67\x5f\x45\x72\x1c\x16\xa1\xd2\xb3\x1f\x88\xcd\xea\x05\x87\x56\xf5\x31\xd4\xee\x55\x29\x85\x6a\xfc\x78\xe3\x30\x1d\x67\x9e\xb3\x59\x91\x6f\x26\x37\x46\x66\x0a\x6b\x88\xfa\xe1\xee\x7b\x5c\xc7\x6e\x5d\xea\x41\x61\x22\x7c\x54\x09\x9c\x63\x62\x4a\xee\x79\x5d\xf9\xd9\x6c\x61\x84\xce\x17\xf6\xb2\xb5\x28\x7e\x60\x2a\x2d\x7a\xb3\xfb\x40\x26\xf6\x12\xe7\xb4\x31\xc0\x6f\xd9\x3b\x50\x0a\xd8\xd9\x8d\xfe\x09\x00\x00\xff\xff\x49\x24\xac\x3b\x9f\x01\x00\x00")

func templatesDot_subgraphsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_subgraphsTmpl,
		"templates/dot_subgraphs.tmpl",
	)
}

func templatesDot_subgraphsTmpl() (*asset, error) {
	bytes, err := templatesDot_subgraphsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_subgraphs.tmpl", size: 415, mode: os.FileMode(436), modTime: time.Unix(1592671645, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xdf\x6f\x9b\x30\x10\x7e\xe7\xaf\x38\x9d\xaa\x3d\x25\x90\x6e\xdd\x1e\x56\x1b\x89\x5f\x69\x90\x18\x44\xd4\xda\xa4\x4d\xd3\x04\xc1\x89\xd0\x5c\xa8\xc0\x9d\x54\x21\xfe\xf7\xc9\x2e\x24\x50\x85\xb7\xf3\xf9\xbe\xfb\xbe\xfb\xce\xee\xba\x82\x1f\xcb\x8a\x03\x16\xb5\xfc\x23\xb3\x5c\xf0\x16\xfb\xde\xe8\xba\x26\xab\x4e\x1c\x6e\xe4\xdf\x15\xdc\x48\xf8\x4a\xc1\x64\xfa\xb6\xef\x0d\x80\xae\x93\xfc\xe9\x59\x64\x72\x0a\x44\x30\x35\x72\x0d\xbc\x2a\x60\xfd\x2e\x36\xae\x50\xe1\xd0\xcc\x64\xa5\x14\xbc\xef\xe1\x97\xc8\x72\x2e\x28\x31\x00\x00\x08\x73\xdc\x28\xd0\x21\x80\x13\x85\x0f\x31\xc5\x28\xd8\x32\x1c\x52\x5e\x10\x45\x7b\xc7\xf7\xc3\xf8\x81\xe2\x66\x9a\x7d\xdc\x3b\x9e\xce\xde\x8d\xd9\x1f\xa1\xcf\x76\x14\x6f\x3f\x0d\x19\x7b\xc8\x13\x96\x8e\xa1\x3a\xf8\x23\x8f\x17\xc4\x2c\x48\x11\xdc\x24\xf5\x83\x54\xb5\x9f\x37\xde\x98\x9f\x11\xbe\x0f\xc5\x6e\xc2\x58\xf2\x0d\xa7\x24\x36\xd9\x26\x31\x83\x7d\x12\xc6\x6c\xfd\x18\xfe\x0c\x28\xde\xde\x21\x6c\x1d\x2f\xa0\xb8\xe3\xe2\x1f\x97\xe5\x21\x83\xbc\x16\x05\xda\xc4\xb5\x2f\x1e\x10\xcb\xb5\x89\xa5\xd0\x36\xb1\x98\x7f\x16\x6a\x5d\x94\x92\x5d\x6a\x8d\xb1\xb2\xb8\x3c\x82\xe9\xd5\xe2\xe5\xa9\x6a\xb5\xd5\x97\x9b\x61\x89\x6a\x87\x07\xbd\xc3\xa1\xec\x5c\xb4\x34\xbf\xf6\x79\x32\xfd\xb5\x79\x3e\xe2\x4c\xb6\x96\x7c\xee\x35\xd7\xe5\x48\xd9\x94\xf9\x8b\xe4\xad\xa9\x37\x3c\x91\xa9\x89\x75\xf3\x37\x73\x9c\xa6\xcc\x04\x84\x32\x13\xe5\x01\xe7\x84\x6a\x09\x49\x94\xa4\x14\x4f\x0d\x7f\xfd\xb2\x41\xfb\x43\x95\xb7\xcf\xf7\x5d\xb7\x40\x73\x5d\xd6\xf8\x22\xcf\xec\x0b\x36\x0f\xb5\x33\x43\xa7\x58\x62\xe9\x07\xaa\xca\x6d\xe3\x32\xb1\xfe\x26\x13\x25\xf9\xe9\x50\x8b\xba\xd1\xa0\xd5\xb1\x14\x42\x1f\x29\x2a\xef\x96\x4a\x71\x65\x00\xb4\xf2\x55\x70\xaa\x10\xbc\x30\xde\xd3\xff\xbe\x9f\xfe\xae\xff\x01\x00\x00\xff\xff\xca\xed\x4a\x5f\xc7\x03\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 967, mode: os.FileMode(436), modTime: time.Unix(1592671482, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl":           templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_subgraphs.tmpl": templatesDot_subgraphsTmpl,
	"templates/dot_tables.tmpl":    templatesDot_tablesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl":           &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_subgraphs.tmpl": &bintree{templatesDot_subgraphsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl":    &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
