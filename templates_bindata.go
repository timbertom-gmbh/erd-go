// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package main generated by go-bindata.// sources:
// templates/dot.tmpl
// templates/dot_relations.tmpl
// templates/dot_subgraphs.tmpl
// templates/dot_tables.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDotTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x5d\xcb\xd3\x30\x14\x80\xef\xfb\x2b\x42\xae\xbb\x98\x55\x5f\x54\x5c\x06\x5e\x28\xbc\xa0\x7b\x45\x77\xe5\x07\x92\x36\x67\x6d\x34\x4b\x4a\x72\xca\xc0\xd0\xff\x2e\x6d\x37\x9a\xce\x31\x7b\x51\x0e\xcf\xf9\xc8\xd3\xf4\xc4\xb8\x22\x0a\x0e\xda\x02\xa1\xca\x21\x25\xab\xbe\xcf\x6a\x2f\xdb\x86\xc4\x8c\x10\x42\xa6\xf8\xdb\x18\x0f\xcf\xd0\xa0\x0f\x84\xed\x35\x1a\x98\xde\x6f\x11\xbd\x2e\x3b\x84\xc0\x8c\x2c\xc1\x8c\x33\x2e\xf5\x23\x11\x9b\xcd\xfb\xa7\xdd\x9e\x7c\x7a\x7a\xdc\xed\x57\x5f\x1e\xbf\xbe\x13\xb4\xe0\x74\x1b\xe3\xbd\x39\x7d\xbf\x79\x36\xb4\x6d\xb7\xf9\x72\xdc\xaf\x2e\xa0\x30\x57\xd0\xb8\x4a\x60\xbe\xf0\x04\xab\x16\x2e\xd6\x29\x08\xd0\x0a\xce\x1e\xe6\x42\x2f\xed\xef\x7f\x60\x2b\x95\xa0\x9c\x15\x39\x67\x05\x9d\xf1\x51\xfa\x5a\xdb\x21\xc3\x13\x5a\x81\xad\xc0\xa2\x97\x08\x02\x7d\x07\x73\x26\xb4\x46\x5b\x08\x82\x4e\x01\x5d\x9e\xaa\xb4\x17\x1f\x3e\x8f\xe8\xc7\x9b\xec\x22\x98\xdc\xf5\x74\x77\xf4\xfb\x2e\x69\x3c\x38\x8b\x41\xff\x01\xb1\x7e\x71\xd3\xeb\x65\xce\x19\x7f\x48\x1a\x5a\xb0\x27\xad\xb0\x11\x6b\xc6\x13\xb3\x46\xb6\x20\x3e\x7a\xa8\x9c\x57\xa9\x02\xa8\x3a\x55\x18\x1c\x4b\x87\xcd\x2d\x81\x62\x86\xd2\x7b\x77\x1a\x29\x67\xaf\xff\x77\xf6\xf8\x59\xd2\xd6\x06\xc4\xf3\xe2\x0a\x2b\x1d\x50\xda\x0a\xc4\x9a\xbd\x4a\xb5\x62\x44\x38\xb6\x46\xe2\xb4\xa7\x3f\x43\x57\x8e\x9b\x19\x28\x61\xe7\x3f\x7c\x5d\xe2\xc1\x48\xd4\xce\xde\x29\x41\x59\x1a\x38\xe7\xfb\x2c\x46\xb0\xaa\xef\xff\x06\x00\x00\xff\xff\xdb\xd4\x1d\xaf\x13\x03\x00\x00")

func templatesDotTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDotTmpl,
		"templates/dot.tmpl",
	)
}

func templatesDotTmpl() (*asset, error) {
	bytes, err := templatesDotTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot.tmpl", size: 787, mode: os.FileMode(436), modTime: time.Unix(1592650866, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_relationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x4b\xfb\x30\x14\xc5\xdf\xfb\x29\x2e\x7d\xfa\xef\xef\x1a\xdd\xb3\xdd\x40\x04\x9f\xa4\xc2\xd8\x9b\x88\xdc\x9a\xdb\x2d\x10\x13\x4c\x23\x43\x42\xbe\xbb\xa4\x76\xb1\x9a\x74\xf8\x76\x39\xdc\xfc\xce\xe5\x9c\x38\xc7\xa9\x13\x8a\xa0\xe4\xda\x3e\x1b\x92\x68\x85\x56\x7d\xe9\x7d\xe1\x9c\x41\xb5\x27\x60\xdb\x93\xea\x7d\x01\xe0\x1c\xbb\xa7\xce\xee\xb0\x95\xd4\xe0\x2b\x79\x0f\x55\x15\xd4\xad\xd8\x1f\x7e\xc8\x8f\x05\x40\xd8\xaf\x40\x74\xf0\x8f\xde\xe0\x6b\xe5\x16\x0d\x17\x0a\xa5\xb0\x1f\x50\xfe\x2f\x17\x50\x0d\x5c\x00\x34\x46\x1f\x0f\x84\x7c\xad\x5f\x8c\x3e\x2e\xc3\x28\xb1\x25\xb9\xae\xeb\xbb\x87\x66\xb7\xb9\x62\xac\xa9\x2f\x87\x71\xb3\x8c\x70\x92\x3d\x9d\x71\xb8\x28\x17\x79\xbe\x25\x4a\x2d\x56\xf3\x16\xe9\x99\x4a\x2b\xd2\x59\xcc\x29\x8e\xc9\x25\xde\x67\xb8\x8a\x47\xec\x98\x53\x4c\xfb\xc6\x5a\x23\xda\x77\x4b\x3d\x1b\xd0\x71\x31\x31\x9a\x79\xf0\x47\xc3\x21\xb6\xd0\xe8\xf9\x5e\x2c\x0a\x39\xf6\x12\xc6\xd9\x5e\xf2\xb5\x24\xfc\x5f\xad\x7c\xd3\x43\x9c\x89\xc1\x6a\xd6\x20\xbd\x31\x96\x92\x50\xc6\x9f\x9b\xed\x24\x93\xd0\xd3\x75\x31\x15\x26\xf3\x67\x00\x00\x00\xff\xff\x93\x21\x06\x17\x35\x03\x00\x00")

func templatesDot_relationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_relationsTmpl,
		"templates/dot_relations.tmpl",
	)
}

func templatesDot_relationsTmpl() (*asset, error) {
	bytes, err := templatesDot_relationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_relations.tmpl", size: 821, mode: os.FileMode(436), modTime: time.Unix(1592581913, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_subgraphsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x41\x6a\xc3\x30\x10\x45\xf7\x3e\xc5\x47\x78\xd9\xf8\x00\x0d\x5e\x94\x1e\x24\x48\xd1\xd8\x15\x99\x4a\x41\x1a\x2f\xca\x30\x77\x2f\x55\x9d\x40\x20\x59\x49\xcc\xbc\x3f\x0f\xbe\x6a\xa4\x25\x65\x82\x8b\x45\x4e\x6d\x0b\x6b\xf5\xd7\xaf\xe6\xcc\x06\xd5\xea\xf3\x4a\x18\xe5\xf2\x86\x51\xf0\x3e\x63\xfa\xe4\xad\x09\xd5\x66\x36\x00\x37\x1a\xe7\xff\xe9\x49\x75\x94\x8b\x19\x74\x00\x00\xd5\xb4\xdc\x13\x1f\x22\x35\x85\x4d\xa8\x4d\xec\x03\xb1\x59\x7f\x30\xc3\xa9\xbe\x86\xdc\x51\x95\x72\xec\xba\xd7\x17\xc3\x7a\x2e\x5c\xaa\x59\x93\x1f\xa6\x79\x49\xcc\x14\x8f\x3d\xd2\x17\xf3\x73\xc7\x3d\xf6\x68\xd9\x55\x42\xdf\x57\xf6\xb2\x37\x23\x3e\x30\x35\x87\xc9\x6c\x78\x0a\x54\x62\x2f\xa9\xe4\x9d\x01\xfe\x0a\x3c\x80\x72\xc4\xc1\x1e\xfe\xbf\x01\x00\x00\xff\xff\x57\x82\xa7\x04\x73\x01\x00\x00")

func templatesDot_subgraphsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_subgraphsTmpl,
		"templates/dot_subgraphs.tmpl",
	)
}

func templatesDot_subgraphsTmpl() (*asset, error) {
	bytes, err := templatesDot_subgraphsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_subgraphs.tmpl", size: 371, mode: os.FileMode(436), modTime: time.Unix(1592655816, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDot_tablesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xdf\x8b\x9b\x40\x10\x7e\xcf\x5f\x31\x0c\x47\x9f\x12\xcd\xb5\x69\x1f\x7a\xbb\x82\xbf\x72\x27\x58\x0d\xde\xd2\x42\x4b\x29\x1a\x37\x41\xba\xa7\x87\xee\x15\x82\xf5\x7f\x2f\x6e\x56\x9b\xa4\xa6\x70\xbe\xb8\xf3\x39\x33\xdf\xe7\x37\xb3\x6d\x9b\xf3\x5d\x51\x72\xc0\xbc\x92\x3f\x64\x9a\x09\xde\x60\xd7\xcd\xda\xb6\x4e\xcb\x3d\x87\x1b\xf9\x73\x0e\x37\x12\x3e\x52\x30\x98\xfa\xda\x75\x33\x80\xb6\x95\xfc\xe9\x59\xa4\xf2\xb4\x10\xc1\x50\x95\x0b\xe0\x65\x0e\x8b\x8b\xf3\x6c\x82\x0a\x75\x33\x83\x15\x52\xf0\xae\x83\x6f\x22\xcd\xb8\xa0\x84\x30\xdb\x09\xfd\x19\xa8\xc7\x89\x13\xcf\x4f\x28\x2e\x51\x03\xae\x1f\x86\x1b\xdb\xf3\x82\xe8\xfe\x02\x7d\xdc\xd8\xee\x11\x35\xde\x0f\xf8\x97\xc0\x63\x0f\x14\x6f\xdf\xad\x06\xc4\x0e\x83\xfb\x88\xa2\xeb\x47\xcc\x4f\x06\xd0\xd2\x6f\xc2\x92\xe1\xd8\x07\xde\x45\x36\x7c\xd6\xb1\x13\x33\x16\x7f\xc2\xd3\xf6\x16\x59\xc7\x11\x83\x4d\x1c\x44\x6c\xf1\x18\x7c\xf5\x29\xde\xae\x10\xd6\xb6\xeb\x53\x7c\xe0\xe2\x17\x97\xc5\x36\x85\xac\x12\x39\x5a\xc4\xb1\xfe\xfe\x38\x31\x1d\x8b\x98\x7d\xb5\x45\x4c\xe6\x8d\x5a\xcc\x41\x0c\x31\x95\x23\xc7\xa0\xb7\xb5\xd8\x81\xe1\x56\xe2\xe5\xa9\x6c\x94\xbd\x3d\xfe\xfb\x98\xfa\x5f\xef\xb4\xfa\xd0\x5f\xb3\x57\xd8\xb9\x9a\x30\x73\x10\xd9\xab\xd1\xcb\xd2\xef\xca\x56\xed\x8a\x96\xa6\x85\x5d\x77\x55\xe9\x98\xf2\xed\x2d\x9e\xd9\xa3\xac\x19\x1b\x9c\x1b\x60\x4b\x59\x17\xd9\x8b\xe4\x8d\xa1\xd6\x67\xf4\x43\xb3\xa9\xe6\xc7\x21\xd8\x75\x91\x0a\x08\x64\x2a\x8a\x2d\x9e\x13\x2e\x11\xdc\x38\x8c\x13\x8a\xfb\x9a\x1f\x3e\x2c\xd1\x7a\x53\x66\xcd\xf3\x5d\xdb\x5e\xa1\x99\x96\x35\xac\xfb\xc8\x3e\x39\xce\x31\x57\x67\xfe\x33\x5e\xdd\xe6\x7c\xde\xea\x02\x9e\xc8\xc8\xf6\xdb\x4a\x54\xb5\xee\x31\xdf\x15\x42\x28\x80\x62\x6f\xdd\xb5\x64\x9c\xab\xf4\x46\x1e\x04\xa7\x7d\x0d\xcf\x2f\x69\x55\xfc\xfd\xee\xf4\xfe\xfe\x09\x00\x00\xff\xff\xd5\x0f\x13\xd0\x29\x04\x00\x00")

func templatesDot_tablesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDot_tablesTmpl,
		"templates/dot_tables.tmpl",
	)
}

func templatesDot_tablesTmpl() (*asset, error) {
	bytes, err := templatesDot_tablesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/dot_tables.tmpl", size: 1065, mode: os.FileMode(436), modTime: time.Unix(1592654180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/dot.tmpl":           templatesDotTmpl,
	"templates/dot_relations.tmpl": templatesDot_relationsTmpl,
	"templates/dot_subgraphs.tmpl": templatesDot_subgraphsTmpl,
	"templates/dot_tables.tmpl":    templatesDot_tablesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"dot.tmpl":           &bintree{templatesDotTmpl, map[string]*bintree{}},
		"dot_relations.tmpl": &bintree{templatesDot_relationsTmpl, map[string]*bintree{}},
		"dot_subgraphs.tmpl": &bintree{templatesDot_subgraphsTmpl, map[string]*bintree{}},
		"dot_tables.tmpl":    &bintree{templatesDot_tablesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
